image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - build
  - test
  - release
  - deploy review
  - stop review
  - deploy staging
  - test staging
  - deploy prod
  - test prod

variables:
  STAGING_DOMAIN: "static-website-staging.herokuapp.com"
  PRODUCTION_DOMAIN: "static-website-production.herokuapp.com"
  REVIEW_DOMAIN: "static-website-review-$CI_COMMIT_REF_NAME.herokuapp.com"
  
build-job:
    stage: build
    script:
        - docker build -t static-website .
        - docker save static-website > static-website.tar
    artifacts:
        paths:
          - static-website.tar
  
test-job:
    stage: test
    script:
      - docker load < static-website.tar 
      - docker run --name website -d -p 80:8080 -e PORT=8080 static-website
      - sleep 5
      - apk add --no-cache curl
      - curl "http://docker" | grep -q "Dimension"

release-job:
    stage: release
    script:
      - docker load < static-website.tar
      - docker tag static-website "${STATIC_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
      - docker tag static-website "${STATIC_IMAGE_NAME}:${CI_COMMIT_REF_NAME}"
      - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
      - docker push "${STATIC_IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
      - docker push  "${STATIC_IMAGE_NAME}:${CI_COMMIT_REF_NAME}"

review-job:
    stage: deploy review
    environment:
      name: review/$CI_COMMIT_REF_NAME
      url: https://$REVIEW_DOMAIN
      on_stop: stop-review-job
    only:
      - merge_requests
    script:
      - apk add --update nodejs npm
      - npm install -g heroku
      - heroku container:login
      - heroku create static-website-review-$CI_COMMIT_REF_NAME || echo "application already exists"
      - heroku container:push -a static-website-review-$CI_COMMIT_REF_NAME web
      - heroku container:release -a static-website-review-$CI_COMMIT_REF_NAME web

stop-review-job:
   stage: stop review
   environment:
     name: review/$CI_COMMIT_REF_NAME
     action: stop
   only:
     - merge_requests
   when: manual
   variables:
     GIT_STRATEGY: none
   script:
     - apk add --update nodejs npm
     - npm install -g heroku
     - heroku container:login
     - heroku apps:destroy -a static-website-review-$CI_COMMIT_REF_NAME --confirm=static-website-review-$CI_COMMIT_REF_NAME

staging-job:
    stage: deploy staging
    environment:
       name: staging
       url: https://$STAGING_DOMAIN
    only:
      - master
    script:
      - apk add --update nodejs npm
      - npm install -g heroku
      - heroku container:login
      - heroku create static-website-staging || echo "application already exists"
      - heroku container:push -a static-website-staging web
      - heroku container:release -a static-website-staging web

production-job:
    stage: deploy prod
    environment:
      name: production
      url: https://$PRODUCTION_DOMAIN
    only:
      - master
    script:
      - apk add --update nodejs npm
      - npm install -g heroku
      - heroku container:login
      - heroku create static-website-production || echo "application already exists"
      - heroku container:push -a static-website-production web
      - heroku container:release -a static-website-production web

.job-template: &test_job
    image: alpine
    only:
      - master
    before_script:
      - apk add --no-cache curl
    script:
      - curl "https://$APP_DOMAIN" | grep -i "dimension"

validate-staging:
   <<: *test_job
   stage: test staging
   variables:
      APP_DOMAIN: $STAGING_DOMAIN

validate-production:
   <<: *test_job
   stage: test prod
   variables:
     APP_DOMAIN: $PRODUCTION_DOMAIN
     
